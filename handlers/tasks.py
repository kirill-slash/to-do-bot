from aiogram import Router, F
from aiogram.types import Message, ReplyKeyboardRemove
from keyboards.keys_tasks import keys_menu, cancellations_task
from aiogram.fsm.context import FSMContext
from aiogram.filters.state import State, StatesGroup
import sqlite3

router = Router()


connection = sqlite3.connect('task.bd')
cursor = connection.cursor()
cursor.execute("""
CREATE TABLE IF NOT EXISTS Task(
id INTEGER PRIMARY KEY AUTOINCREMENT,  
user_id INTEGER NOT NULL,
task_text TEXT NOT NULL         
)
""")
connection.commit()
connection.close()


class Task(StatesGroup):
    create_task = State()
    name_task = State()
    id_del_task = State()



@router.message(F.text.lower() == "‚ùå –æ—Ç–º–µ–Ω–∞")
async def cancellation(message: Message, state: FSMContext):
    await message.answer("–î–µ–π—Å—Ç–≤–∏–µ –æ—Ç–º–µ–Ω–µ–Ω–æ", reply_markup=keys_menu())
    await state.clear()



@router.message(F.text.lower() == "‚úèÔ∏è –¥–æ–±–∞–≤–∏—Ç—å –∑–∞–¥–∞—á—É")
async def add_tasks(message: Message, state: FSMContext):
    text_add_task_1 = """‚ú® *–î–∞–≤–∞–π—Ç–µ —Å–æ–∑–¥–∞–¥–∏–º –∑–∞–¥–∞—á—É!*  

–ö–∞–∫ –≤–∞–º —É–¥–æ–±–Ω–µ–µ –µ—ë –Ω–∞–∑–≤–∞—Ç—å?  
–ú–æ–∂–µ—Ç–µ –ø—Ä–æ—Å—Ç–æ –Ω–∞–ø–∏—Å–∞—Ç—å –≤ —á–∞—Ç ‚Äî —á—Ç–æ –≤—ã —Ö–æ—Ç–∏—Ç–µ —Å–¥–µ–ª–∞—Ç—å.  

–Ø –≤—Å—ë –∑–∞–ø–æ–º–Ω—é! üòä"""
    await message.answer(text_add_task_1, reply_markup=cancellations_task())
    await state.set_state(Task.create_task)



@router.message(Task.create_task)
async def total_add_task(message: Message, state: FSMContext):
    connection = sqlite3.connect('task.bd')
    cursor = connection.cursor()

    cursor.execute("""
INSERT INTO Task (user_id, task_text) VALUES (?, ?)
""", (message.from_user.id, message.text))

    connection.commit()
    connection.close()

    text_add_task_2 = f'''üìå –û—Ç–ª–∏—á–Ω–æ! –ó–∞–¥–∞—á–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∞:

"{message.text}" üòâ'''
    await message.answer(text_add_task_2, reply_markup=keys_menu())
    await state.set_state(Task.name_task)

    

@router.message(F.text.lower() == "üìÉ –≤—Å–µ –∑–∞–¥–∞—á–∏")
async def show_task(message: Message):
    text_show_tasks = "üìã *–í–∞—à–∏ —Ç–µ–∫—É—â–∏–µ –∑–∞–¥–∞—á–∏:*\n"
    connection = sqlite3.connect('task.bd')
    cursor = connection.cursor()

    cursor.execute("""
SELECT task_text FROM Task WHERE user_id = ?
""", (message.from_user.id,))

    list_task = cursor.fetchall() 
    
    if len(list_task) >= 1:
        list_task = list_task[0]
        for i in range(len(list_task)):
            text_show_tasks += f"\n{i+1}. {list_task[i]}"
        await message.answer(text_show_tasks)
    else:
        await message.answer("üéâ –£ –≤–∞—Å –ø–æ–∫–∞ –Ω–µ—Ç –∑–∞–¥–∞—á!")

    connection.commit()
    connection.close()



@router.message(F.text.lower() == "‚ùå —É–¥–∞–ª–∏—Ç—å –∑–∞–¥–∞—á—É")
async def del_task(message: Message, state: FSMContext):
    connection = sqlite3.connect('task.bd')
    cursor = connection.cursor()

    cursor.execute("""
SELECT task_text FROM Task WHERE user_id = ?
""", (message.from_user.id,))
    
    list_task = cursor.fetchall()

    if len(list_task) >= 1:
        list_task = list_task[0]

        text_del = """üóëÔ∏è *–£–¥–∞–ª–µ–Ω–∏–µ –∑–∞–¥–∞—á–∏*
        
–í–∞—à–∏ —Ç–µ–∫—É—â–∏–µ –∑–∞–¥–∞—á–∏:
"""
        
        for i in range(len(list_task)):
            text_del += f'{i+1}. {list_task[i]}\n'
        text_del += """
–í–≤–µ–¥–∏—Ç–µ –Ω–æ–º–µ—Ä –∑–∞–¥–∞—á–∏ –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è:
(–∏–ª–∏ –Ω–∞–∂–º–∏—Ç–µ "–û—Ç–º–µ–Ω–∞")"""

        await message.answer(text_del, reply_markup=cancellations_task())
        await state.set_state(Task.id_del_task)  

    else:
        await message.answer("üéâ –£ –≤–∞—Å –ø–æ–∫–∞ –Ω–µ—Ç –∑–∞–¥–∞—á!")



@router.message(Task.id_del_task)
async def del_id(message: Message, state: FSMContext):
    connection = sqlite3.connect('task.bd')
    cursor = connection.cursor()

    cursor.execute("SELECT id FROM Task")
    id_task = cursor.fetchall()

    try:
        cursor.execute("""
DELETE FROM Task WHERE user_id = ? AND id = ?
""", (message.from_user.id, id_task[int(message.text)-1][0]))
        await message.answer("‚úÖ –ó–∞–¥–∞—á–∞ —É–¥–∞–ª–µ–Ω–∞!", reply_markup=keys_menu())
    except:
        await message.answer("‚õî –í—ã –≤–≤–µ–ª–∏ –Ω–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ üò¢", reply_markup=keys_menu())

    connection.commit()
    connection.close()